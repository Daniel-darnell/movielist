[{"/home/daniel-darnell/Desktop/m/harperdb-movie-generator-master/src/index.js":"1","/home/daniel-darnell/Desktop/m/harperdb-movie-generator-master/src/App.js":"2","/home/daniel-darnell/Desktop/m/harperdb-movie-generator-master/src/components/Movie.js":"3"},{"size":446,"mtime":1631720734000,"results":"4","hashOfConfig":"5"},{"size":535,"mtime":1636693084389,"results":"6","hashOfConfig":"5"},{"size":2068,"mtime":1636693452541,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"xxaqgy",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/home/daniel-darnell/Desktop/m/harperdb-movie-generator-master/src/index.js",[],["16","17"],"/home/daniel-darnell/Desktop/m/harperdb-movie-generator-master/src/App.js",[],"/home/daniel-darnell/Desktop/m/harperdb-movie-generator-master/src/components/Movie.js",["18","19"],"import React from 'react';\nimport { useHarperDB } from 'use-harperdb';\n\nfunction Movie() {\nlet [data, loading, error, refresh] = useHarperDB({\n    query: {\n      operation: 'sql',\n      sql: `select * from collection.movie where id = ${Math.floor(Math.random() * 8) + 1}`\n    }\n    /* interval: 40000 */\n  }\n  )\n\n\n\n  if(loading) {\n    return <div> Loading... </div>\n  }\n\n\nif(data) {\n      return (\n<>\n<div className=\"movie-cover\">\n  <div className=\"top-information\">\n    <h2 className=\"title\">{data[0].title}</h2>\n    <div className=\"circle\">\n      <div className=\"ratings\">\n        <span className=\"big-half\">{data[0].rating}</span>/<span className=\"small-half\">10</span>\n      </div>\n    </div>\n  </div>\n\n  <div className=\"supporting-info\">\n    <span className=\"year\">{data[0].date}</span> -\n    <span className=\"time\">{data[0].hours}h:{data[0].minutes}m</span>\n  </div>\n  <div className=\"image\">\n    <img src={data[0].cover} alt=\"Movie Image\" />\n  </div>\n</div>\n\n<div className=\"genres\">\n  <ul className=\"movie-genres\">\n    {data[0].genres.map((genre, index) => {\n    return (\n    <li key={index}><span className=\"movie-genre-item\">{genre}</span></li>\n  )\n    })}\n  </ul>\n</div>\n\n<div className=\"lower-information\">\n  <p>{data[0].description}</p>\n\n  <hr />\n  <p> Starring: {data[0].stars.map((star, index) => {\n    return (\n    <span key={index}>{star} - </span>\n    )\n    })}\n  </p>\n  <hr />\n  <p> Writers:\n    {data[0].writers.map((writer, index) => {\n      return (\n    <span key={index} className=\"writer\">{writer} - </span>\n    )\n    })}\n  </p>\n  <hr />\n  <p>Directors:\n    {data[0].directors.map((director, index) => {\n      return (\n    <span key={index} className=\"director\">{director} - </span>\n    )\n    })}\n  </p>\n  <hr />\n  <div className=\"action-buttons\">\n    <a href={data[0].website} className=\"visit-movie-button\">Visit Movie</a>\n    <a href=\"\" className=\"generate-movie-button\" onClick={refresh}>GENERATE NEW MOVIE</a>\n  </div>\n</div>\n</>\n)\n} else {\n    return (\n      <div>Sorry No Data\n        {error}\n      </div>\n  )\n}\n\n}\n\nexport default Movie\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":39,"column":5,"nodeType":"26","endLine":39,"endColumn":50},{"ruleId":"27","severity":1,"message":"28","line":82,"column":5,"nodeType":"26","endLine":82,"endColumn":68},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]